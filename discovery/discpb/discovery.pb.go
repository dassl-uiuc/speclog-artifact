// Code generated by protoc-gen-go.
// source: discpb/discovery.proto
// DO NOT EDIT!

/*
Package discpb is a generated protocol buffer package.

It is generated from these files:
	discpb/discovery.proto

It has these top-level messages:
	Empty
	View
*/
package discpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type View struct {
	ViewID          int32   `protobuf:"varint,1,opt,name=viewID" json:"viewID,omitempty"`
	LiveShards      []int32 `protobuf:"varint,2,rep,packed,name=liveShards" json:"liveShards,omitempty"`
	FinalizedShards []int32 `protobuf:"varint,3,rep,packed,name=finalizedShards" json:"finalizedShards,omitempty"`
}

func (m *View) Reset()                    { *m = View{} }
func (m *View) String() string            { return proto.CompactTextString(m) }
func (*View) ProtoMessage()               {}
func (*View) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *View) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

func (m *View) GetLiveShards() []int32 {
	if m != nil {
		return m.LiveShards
	}
	return nil
}

func (m *View) GetFinalizedShards() []int32 {
	if m != nil {
		return m.FinalizedShards
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "discpb.Empty")
	proto.RegisterType((*View)(nil), "discpb.View")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Discovery service

type DiscoveryClient interface {
	Discover(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Discovery_DiscoverClient, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Discover(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Discovery_DiscoverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Discovery_serviceDesc.Streams[0], c.cc, "/discpb.Discovery/Discover", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryDiscoverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Discovery_DiscoverClient interface {
	Recv() (*View, error)
	grpc.ClientStream
}

type discoveryDiscoverClient struct {
	grpc.ClientStream
}

func (x *discoveryDiscoverClient) Recv() (*View, error) {
	m := new(View)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Discovery service

type DiscoveryServer interface {
	Discover(*Empty, Discovery_DiscoverServer) error
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Discover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServer).Discover(m, &discoveryDiscoverServer{stream})
}

type Discovery_DiscoverServer interface {
	Send(*View) error
	grpc.ServerStream
}

type discoveryDiscoverServer struct {
	grpc.ServerStream
}

func (x *discoveryDiscoverServer) Send(m *View) error {
	return x.ServerStream.SendMsg(m)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discpb.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Discover",
			Handler:       _Discovery_Discover_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "discpb/discovery.proto",
}

func init() { proto.RegisterFile("discpb/discovery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xc9, 0x2c, 0x4e,
	0x2e, 0x48, 0xd2, 0x07, 0x51, 0xf9, 0x65, 0xa9, 0x45, 0x95, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0x6c, 0x10, 0x71, 0x25, 0x76, 0x2e, 0x56, 0xd7, 0xdc, 0x82, 0x92, 0x4a, 0xa5, 0x0c, 0x2e,
	0x96, 0xb0, 0xcc, 0xd4, 0x72, 0x21, 0x31, 0x2e, 0xb6, 0xb2, 0xcc, 0xd4, 0x72, 0x4f, 0x17, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f, 0x48, 0x8e, 0x8b, 0x2b, 0x27, 0xb3, 0x2c, 0x35,
	0x38, 0x23, 0xb1, 0x28, 0xa5, 0x58, 0x82, 0x49, 0x81, 0x59, 0x83, 0x35, 0x08, 0x49, 0x44, 0x48,
	0x83, 0x8b, 0x3f, 0x2d, 0x33, 0x2f, 0x31, 0x27, 0xb3, 0x2a, 0x35, 0x05, 0xaa, 0x88, 0x19, 0xac,
	0x08, 0x5d, 0xd8, 0xc8, 0x82, 0x8b, 0xd3, 0x05, 0xe6, 0x1a, 0x21, 0x6d, 0x2e, 0x0e, 0x18, 0x47,
	0x88, 0x57, 0x0f, 0xe2, 0x28, 0x3d, 0xb0, 0x8b, 0xa4, 0x78, 0x60, 0x5c, 0x90, 0xbb, 0x94, 0x18,
	0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x6e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x26, 0xcc,
	0x37, 0xd5, 0x00, 0x00, 0x00,
}
