syntax = "proto3";

package orderpb;

service Order {
	rpc Report(stream LocalCuts) returns (stream CommittedEntry) {}
	rpc Forward(stream LocalCuts) returns (Empty) {}
	rpc Finalize(FinalizeEntry) returns (Empty) {}
}

message LocalCut {
	int32 shardID = 1;
	int32 localReplicaID = 2; // 0...(numReplicas-1)
	repeated int64 cut = 3; // Array of len numReplicas
    int64 quota = 4;
    int64 localCutNum = 5;
}

message LocalCuts {
	repeated LocalCut cuts = 1;
}

message CommittedCut {
	int64 startGSN = 1;
	// from globalReplicaID to each cut entry
	// globalReplicaID = shardID * numReplicas + localReplicaID
	map<int32, int64> cut = 2;
    map<int32, int64> shardQuotas = 3;
	map<int32, bool> isShardQuotaUpdated = 4;
}

message CommittedEntry {
	int64 seq = 1;
	int32 viewID = 2;
	CommittedCut committedCut = 3;
	FinalizeEntry finalizeShards = 4;
}

message FinalizeEntry {
	int32 limit = 1;
	repeated int32 shardIDs = 2;
}

message Empty {}
