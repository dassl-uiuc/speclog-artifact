// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderpb/order.proto

package orderpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LocalCut struct {
	ShardID              int32    `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	LocalReplicaID       int32    `protobuf:"varint,2,opt,name=localReplicaID,proto3" json:"localReplicaID,omitempty"`
	Cut                  []int64  `protobuf:"varint,3,rep,packed,name=cut,proto3" json:"cut,omitempty"`
	Quota                int64    `protobuf:"varint,4,opt,name=quota,proto3" json:"quota,omitempty"`
	LocalCutNum          int64    `protobuf:"varint,5,opt,name=localCutNum,proto3" json:"localCutNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalCut) Reset()         { *m = LocalCut{} }
func (m *LocalCut) String() string { return proto.CompactTextString(m) }
func (*LocalCut) ProtoMessage()    {}
func (*LocalCut) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{0}
}

func (m *LocalCut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalCut.Unmarshal(m, b)
}
func (m *LocalCut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalCut.Marshal(b, m, deterministic)
}
func (m *LocalCut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalCut.Merge(m, src)
}
func (m *LocalCut) XXX_Size() int {
	return xxx_messageInfo_LocalCut.Size(m)
}
func (m *LocalCut) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalCut.DiscardUnknown(m)
}

var xxx_messageInfo_LocalCut proto.InternalMessageInfo

func (m *LocalCut) GetShardID() int32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LocalCut) GetLocalReplicaID() int32 {
	if m != nil {
		return m.LocalReplicaID
	}
	return 0
}

func (m *LocalCut) GetCut() []int64 {
	if m != nil {
		return m.Cut
	}
	return nil
}

func (m *LocalCut) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *LocalCut) GetLocalCutNum() int64 {
	if m != nil {
		return m.LocalCutNum
	}
	return 0
}

type LocalCuts struct {
	Cuts                 []*LocalCut `protobuf:"bytes,1,rep,name=cuts,proto3" json:"cuts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LocalCuts) Reset()         { *m = LocalCuts{} }
func (m *LocalCuts) String() string { return proto.CompactTextString(m) }
func (*LocalCuts) ProtoMessage()    {}
func (*LocalCuts) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{1}
}

func (m *LocalCuts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalCuts.Unmarshal(m, b)
}
func (m *LocalCuts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalCuts.Marshal(b, m, deterministic)
}
func (m *LocalCuts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalCuts.Merge(m, src)
}
func (m *LocalCuts) XXX_Size() int {
	return xxx_messageInfo_LocalCuts.Size(m)
}
func (m *LocalCuts) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalCuts.DiscardUnknown(m)
}

var xxx_messageInfo_LocalCuts proto.InternalMessageInfo

func (m *LocalCuts) GetCuts() []*LocalCut {
	if m != nil {
		return m.Cuts
	}
	return nil
}

type CommittedCut struct {
	StartGSN int64 `protobuf:"varint,1,opt,name=startGSN,proto3" json:"startGSN,omitempty"`
	// from globalReplicaID to each cut entry
	// globalReplicaID = shardID * numReplicas + localReplicaID
	Cut                  map[int32]int64 `protobuf:"bytes,2,rep,name=cut,proto3" json:"cut,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ShardQuotas          map[int32]int64 `protobuf:"bytes,3,rep,name=shardQuotas,proto3" json:"shardQuotas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsShardQuotaUpdated  bool            `protobuf:"varint,4,opt,name=isShardQuotaUpdated,proto3" json:"isShardQuotaUpdated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommittedCut) Reset()         { *m = CommittedCut{} }
func (m *CommittedCut) String() string { return proto.CompactTextString(m) }
func (*CommittedCut) ProtoMessage()    {}
func (*CommittedCut) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{2}
}

func (m *CommittedCut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommittedCut.Unmarshal(m, b)
}
func (m *CommittedCut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommittedCut.Marshal(b, m, deterministic)
}
func (m *CommittedCut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommittedCut.Merge(m, src)
}
func (m *CommittedCut) XXX_Size() int {
	return xxx_messageInfo_CommittedCut.Size(m)
}
func (m *CommittedCut) XXX_DiscardUnknown() {
	xxx_messageInfo_CommittedCut.DiscardUnknown(m)
}

var xxx_messageInfo_CommittedCut proto.InternalMessageInfo

func (m *CommittedCut) GetStartGSN() int64 {
	if m != nil {
		return m.StartGSN
	}
	return 0
}

func (m *CommittedCut) GetCut() map[int32]int64 {
	if m != nil {
		return m.Cut
	}
	return nil
}

func (m *CommittedCut) GetShardQuotas() map[int32]int64 {
	if m != nil {
		return m.ShardQuotas
	}
	return nil
}

func (m *CommittedCut) GetIsShardQuotaUpdated() bool {
	if m != nil {
		return m.IsShardQuotaUpdated
	}
	return false
}

type CommittedEntry struct {
	Seq                  int64          `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ViewID               int32          `protobuf:"varint,2,opt,name=viewID,proto3" json:"viewID,omitempty"`
	CommittedCut         *CommittedCut  `protobuf:"bytes,3,opt,name=committedCut,proto3" json:"committedCut,omitempty"`
	FinalizeShards       *FinalizeEntry `protobuf:"bytes,4,opt,name=finalizeShards,proto3" json:"finalizeShards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CommittedEntry) Reset()         { *m = CommittedEntry{} }
func (m *CommittedEntry) String() string { return proto.CompactTextString(m) }
func (*CommittedEntry) ProtoMessage()    {}
func (*CommittedEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{3}
}

func (m *CommittedEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommittedEntry.Unmarshal(m, b)
}
func (m *CommittedEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommittedEntry.Marshal(b, m, deterministic)
}
func (m *CommittedEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommittedEntry.Merge(m, src)
}
func (m *CommittedEntry) XXX_Size() int {
	return xxx_messageInfo_CommittedEntry.Size(m)
}
func (m *CommittedEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommittedEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommittedEntry proto.InternalMessageInfo

func (m *CommittedEntry) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CommittedEntry) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

func (m *CommittedEntry) GetCommittedCut() *CommittedCut {
	if m != nil {
		return m.CommittedCut
	}
	return nil
}

func (m *CommittedEntry) GetFinalizeShards() *FinalizeEntry {
	if m != nil {
		return m.FinalizeShards
	}
	return nil
}

type FinalizeEntry struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ShardIDs             []int32  `protobuf:"varint,2,rep,packed,name=shardIDs,proto3" json:"shardIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinalizeEntry) Reset()         { *m = FinalizeEntry{} }
func (m *FinalizeEntry) String() string { return proto.CompactTextString(m) }
func (*FinalizeEntry) ProtoMessage()    {}
func (*FinalizeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{4}
}

func (m *FinalizeEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeEntry.Unmarshal(m, b)
}
func (m *FinalizeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeEntry.Marshal(b, m, deterministic)
}
func (m *FinalizeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeEntry.Merge(m, src)
}
func (m *FinalizeEntry) XXX_Size() int {
	return xxx_messageInfo_FinalizeEntry.Size(m)
}
func (m *FinalizeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeEntry proto.InternalMessageInfo

func (m *FinalizeEntry) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FinalizeEntry) GetShardIDs() []int32 {
	if m != nil {
		return m.ShardIDs
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a9833f63666870, []int{5}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LocalCut)(nil), "orderpb.LocalCut")
	proto.RegisterType((*LocalCuts)(nil), "orderpb.LocalCuts")
	proto.RegisterType((*CommittedCut)(nil), "orderpb.CommittedCut")
	proto.RegisterMapType((map[int32]int64)(nil), "orderpb.CommittedCut.CutEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "orderpb.CommittedCut.ShardQuotasEntry")
	proto.RegisterType((*CommittedEntry)(nil), "orderpb.CommittedEntry")
	proto.RegisterType((*FinalizeEntry)(nil), "orderpb.FinalizeEntry")
	proto.RegisterType((*Empty)(nil), "orderpb.Empty")
}

func init() { proto.RegisterFile("orderpb/order.proto", fileDescriptor_87a9833f63666870) }

var fileDescriptor_87a9833f63666870 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xc6, 0x75, 0x62, 0xc6, 0x25, 0x2a, 0x53, 0x28, 0x56, 0x1e, 0x90, 0x65, 0x89, 0xca,
	0x4f, 0x69, 0x30, 0x08, 0xf1, 0x23, 0x55, 0x42, 0x69, 0x0b, 0x95, 0x50, 0x11, 0x5b, 0x71, 0x00,
	0xd7, 0x5e, 0x60, 0x85, 0x5d, 0xbb, 0xbb, 0xeb, 0x56, 0xe1, 0x20, 0xdc, 0x84, 0x7b, 0x70, 0x02,
	0xce, 0x82, 0x76, 0xfd, 0xd3, 0x34, 0x0e, 0x0f, 0x7d, 0xf2, 0xce, 0xcc, 0xf7, 0xed, 0xcc, 0xf7,
	0xed, 0xc8, 0xb0, 0x53, 0x88, 0x94, 0x89, 0xf2, 0x7c, 0xdf, 0x7c, 0xa7, 0xa5, 0x28, 0x54, 0x81,
	0xa3, 0x26, 0x19, 0xfc, 0x22, 0xe0, 0x7c, 0x2c, 0x92, 0x38, 0x9b, 0x57, 0x0a, 0x3d, 0x18, 0xc9,
	0xef, 0xb1, 0x48, 0x4f, 0x0e, 0x3d, 0xe2, 0x93, 0xd0, 0xa6, 0x6d, 0x88, 0x7b, 0x30, 0xce, 0x34,
	0x8a, 0xb2, 0x32, 0xe3, 0x49, 0x7c, 0x72, 0xe8, 0x0d, 0x0c, 0x60, 0x25, 0x8b, 0xdb, 0x60, 0x25,
	0x95, 0xf2, 0x2c, 0xdf, 0x0a, 0x2d, 0xaa, 0x8f, 0xf8, 0x10, 0xec, 0xcb, 0xaa, 0x50, 0xb1, 0xb7,
	0xe9, 0x93, 0xd0, 0xa2, 0x75, 0x80, 0x3e, 0xb8, 0x59, 0xd3, 0xf5, 0xb4, 0xca, 0x3d, 0xdb, 0xd4,
	0x96, 0x53, 0x41, 0x04, 0xf7, 0xda, 0xb9, 0x24, 0x3e, 0x85, 0xcd, 0xa4, 0x52, 0xd2, 0x23, 0xbe,
	0x15, 0xba, 0xd1, 0x83, 0x69, 0x33, 0xfd, 0xb4, 0x45, 0x50, 0x53, 0x0e, 0xfe, 0x0c, 0x60, 0x6b,
	0x5e, 0xe4, 0x39, 0x57, 0x8a, 0xa5, 0x5a, 0xd0, 0x04, 0x1c, 0xa9, 0x62, 0xa1, 0xde, 0x9f, 0x9d,
	0x1a, 0x45, 0x16, 0xed, 0x62, 0x9c, 0xd5, 0xa3, 0x0e, 0xcc, 0x95, 0x4f, 0xba, 0x2b, 0x97, 0xf9,
	0xd3, 0x79, 0xa5, 0x8e, 0x2e, 0x94, 0x58, 0xd4, 0x52, 0x3e, 0x80, 0x6b, 0xfc, 0xf8, 0xac, 0x25,
	0x48, 0x23, 0xd2, 0x8d, 0xf6, 0xd6, 0x33, 0xcf, 0x6e, 0x80, 0xf5, 0x0d, 0xcb, 0x54, 0x9c, 0xc1,
	0x0e, 0x97, 0x37, 0x90, 0x2f, 0x65, 0x1a, 0x2b, 0x96, 0x1a, 0x8b, 0x1c, 0xba, 0xae, 0x34, 0x79,
	0x09, 0x4e, 0x3b, 0x8c, 0x36, 0xf9, 0x07, 0x5b, 0x34, 0x4f, 0xa4, 0x8f, 0xda, 0xe4, 0xab, 0x38,
	0xab, 0x98, 0x79, 0x15, 0x8b, 0xd6, 0xc1, 0x9b, 0xc1, 0x2b, 0x32, 0x39, 0x80, 0xed, 0xd5, 0x51,
	0xee, 0xc2, 0x0f, 0x7e, 0x13, 0x18, 0x77, 0xc2, 0x3a, 0xba, 0x64, 0x97, 0x8d, 0x9f, 0xfa, 0x88,
	0xbb, 0x30, 0xbc, 0xe2, 0xec, 0xba, 0xdb, 0x8a, 0x26, 0xc2, 0xd7, 0xb0, 0x95, 0x2c, 0x99, 0xe2,
	0x59, 0x3e, 0x09, 0xdd, 0xe8, 0xd1, 0x5a, 0xc7, 0xe8, 0x2d, 0x28, 0x1e, 0xc0, 0xf8, 0x2b, 0xbf,
	0x88, 0x33, 0xfe, 0x93, 0x99, 0xf9, 0xa5, 0x31, 0xc7, 0x8d, 0x76, 0x3b, 0xf2, 0x71, 0x53, 0xae,
	0xed, 0x5d, 0x41, 0x07, 0xef, 0xe0, 0xfe, 0x2d, 0x80, 0x96, 0x98, 0xf1, 0x9c, 0xab, 0x46, 0x76,
	0x1d, 0x98, 0x05, 0xa9, 0x57, 0x5c, 0x9a, 0x4d, 0xb0, 0x69, 0x17, 0x07, 0x23, 0xb0, 0x8f, 0xf2,
	0x52, 0x2d, 0xa2, 0xbf, 0x04, 0xec, 0x4f, 0xba, 0x2b, 0xbe, 0x85, 0x21, 0x65, 0x65, 0x21, 0x14,
	0x62, 0x6f, 0x07, 0xe5, 0xe4, 0x71, 0x5f, 0x98, 0xe9, 0x1d, 0x6c, 0x84, 0x64, 0x46, 0x70, 0x1f,
	0x1c, 0xca, 0xbe, 0x71, 0xa9, 0x98, 0xc0, 0xfe, 0x0a, 0x4f, 0xc6, 0x5d, 0xca, 0x74, 0x0d, 0x36,
	0xf0, 0x19, 0x8c, 0x8e, 0x0b, 0x71, 0x1d, 0x8b, 0x74, 0x6d, 0xbb, 0x1e, 0x21, 0x24, 0xf8, 0x02,
	0x9c, 0x56, 0x36, 0xfe, 0xc7, 0xaa, 0x3e, 0xef, 0x7c, 0x68, 0x7e, 0x0a, 0xcf, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0xec, 0xdd, 0xf5, 0x2b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (Order_ReportClient, error)
	Register(ctx context.Context, in *LocalCut, opts ...grpc.CallOption) (*Empty, error)
	Forward(ctx context.Context, opts ...grpc.CallOption) (Order_ForwardClient, error)
	Finalize(ctx context.Context, in *FinalizeEntry, opts ...grpc.CallOption) (*Empty, error)
}

type orderClient struct {
	cc *grpc.ClientConn
}

func NewOrderClient(cc *grpc.ClientConn) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) Report(ctx context.Context, opts ...grpc.CallOption) (Order_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Order_serviceDesc.Streams[0], "/orderpb.Order/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderReportClient{stream}
	return x, nil
}

type Order_ReportClient interface {
	Send(*LocalCuts) error
	Recv() (*CommittedEntry, error)
	grpc.ClientStream
}

type orderReportClient struct {
	grpc.ClientStream
}

func (x *orderReportClient) Send(m *LocalCuts) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderReportClient) Recv() (*CommittedEntry, error) {
	m := new(CommittedEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderClient) Register(ctx context.Context, in *LocalCut, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/orderpb.Order/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Order_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Order_serviceDesc.Streams[1], "/orderpb.Order/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderForwardClient{stream}
	return x, nil
}

type Order_ForwardClient interface {
	Send(*LocalCuts) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type orderForwardClient struct {
	grpc.ClientStream
}

func (x *orderForwardClient) Send(m *LocalCuts) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderForwardClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderClient) Finalize(ctx context.Context, in *FinalizeEntry, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/orderpb.Order/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
type OrderServer interface {
	Report(Order_ReportServer) error
	Register(context.Context, *LocalCut) (*Empty, error)
	Forward(Order_ForwardServer) error
	Finalize(context.Context, *FinalizeEntry) (*Empty, error)
}

// UnimplementedOrderServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (*UnimplementedOrderServer) Report(srv Order_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedOrderServer) Register(ctx context.Context, req *LocalCut) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedOrderServer) Forward(srv Order_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (*UnimplementedOrderServer) Finalize(ctx context.Context, req *FinalizeEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}

func RegisterOrderServer(s *grpc.Server, srv OrderServer) {
	s.RegisterService(&_Order_serviceDesc, srv)
}

func _Order_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServer).Report(&orderReportServer{stream})
}

type Order_ReportServer interface {
	Send(*CommittedEntry) error
	Recv() (*LocalCuts, error)
	grpc.ServerStream
}

type orderReportServer struct {
	grpc.ServerStream
}

func (x *orderReportServer) Send(m *CommittedEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderReportServer) Recv() (*LocalCuts, error) {
	m := new(LocalCuts)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Order_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalCut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Register(ctx, req.(*LocalCut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServer).Forward(&orderForwardServer{stream})
}

type Order_ForwardServer interface {
	SendAndClose(*Empty) error
	Recv() (*LocalCuts, error)
	grpc.ServerStream
}

type orderForwardServer struct {
	grpc.ServerStream
}

func (x *orderForwardServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderForwardServer) Recv() (*LocalCuts, error) {
	m := new(LocalCuts)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Order_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Finalize(ctx, req.(*FinalizeEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderpb.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Order_Register_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _Order_Finalize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _Order_Report_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Forward",
			Handler:       _Order_Forward_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "orderpb/order.proto",
}
