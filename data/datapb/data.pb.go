// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datapb/data.proto

package datapb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	ClientID             int32    `protobuf:"varint,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSN             int32    `protobuf:"varint,2,opt,name=clientSN,proto3" json:"clientSN,omitempty"`
	ShardID              int32    `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	LocalReplicaID       int32    `protobuf:"varint,4,opt,name=localReplicaID,proto3" json:"localReplicaID,omitempty"`
	ViewID               int32    `protobuf:"varint,5,opt,name=viewID,proto3" json:"viewID,omitempty"`
	GlobalSN             int64    `protobuf:"varint,6,opt,name=globalSN,proto3" json:"globalSN,omitempty"`
	Record               string   `protobuf:"bytes,7,opt,name=record,proto3" json:"record,omitempty"`
	NumHoles             int32    `protobuf:"varint,8,opt,name=numHoles,proto3" json:"numHoles,omitempty"`
	GlobalSN1            int64    `protobuf:"varint,9,opt,name=globalSN1,proto3" json:"globalSN1,omitempty"`
	AppenderID           int32    `protobuf:"varint,10,opt,name=appenderID,proto3" json:"appenderID,omitempty"`
	RecordID             int32    `protobuf:"varint,11,opt,name=recordID,proto3" json:"recordID,omitempty"`
	MissedRecords        []int64  `protobuf:"varint,12,rep,packed,name=missedRecords,proto3" json:"missedRecords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb12a5d0dd175b31, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetClientID() int32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *Record) GetClientSN() int32 {
	if m != nil {
		return m.ClientSN
	}
	return 0
}

func (m *Record) GetShardID() int32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Record) GetLocalReplicaID() int32 {
	if m != nil {
		return m.LocalReplicaID
	}
	return 0
}

func (m *Record) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

func (m *Record) GetGlobalSN() int64 {
	if m != nil {
		return m.GlobalSN
	}
	return 0
}

func (m *Record) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

func (m *Record) GetNumHoles() int32 {
	if m != nil {
		return m.NumHoles
	}
	return 0
}

func (m *Record) GetGlobalSN1() int64 {
	if m != nil {
		return m.GlobalSN1
	}
	return 0
}

func (m *Record) GetAppenderID() int32 {
	if m != nil {
		return m.AppenderID
	}
	return 0
}

func (m *Record) GetRecordID() int32 {
	if m != nil {
		return m.RecordID
	}
	return 0
}

func (m *Record) GetMissedRecords() []int64 {
	if m != nil {
		return m.MissedRecords
	}
	return nil
}

type Ack struct {
	ClientID             int32    `protobuf:"varint,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSN             int32    `protobuf:"varint,2,opt,name=clientSN,proto3" json:"clientSN,omitempty"`
	ShardID              int32    `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	LocalReplicaID       int32    `protobuf:"varint,4,opt,name=localReplicaID,proto3" json:"localReplicaID,omitempty"`
	ViewID               int32    `protobuf:"varint,5,opt,name=viewID,proto3" json:"viewID,omitempty"`
	GlobalSN             int64    `protobuf:"varint,6,opt,name=globalSN,proto3" json:"globalSN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb12a5d0dd175b31, []int{1}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetClientID() int32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *Ack) GetClientSN() int32 {
	if m != nil {
		return m.ClientSN
	}
	return 0
}

func (m *Ack) GetShardID() int32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Ack) GetLocalReplicaID() int32 {
	if m != nil {
		return m.LocalReplicaID
	}
	return 0
}

func (m *Ack) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

func (m *Ack) GetGlobalSN() int64 {
	if m != nil {
		return m.GlobalSN
	}
	return 0
}

type GlobalSN struct {
	GSN                  int64    `protobuf:"varint,1,opt,name=gSN,proto3" json:"gSN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalSN) Reset()         { *m = GlobalSN{} }
func (m *GlobalSN) String() string { return proto.CompactTextString(m) }
func (*GlobalSN) ProtoMessage()    {}
func (*GlobalSN) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb12a5d0dd175b31, []int{2}
}

func (m *GlobalSN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalSN.Unmarshal(m, b)
}
func (m *GlobalSN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalSN.Marshal(b, m, deterministic)
}
func (m *GlobalSN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSN.Merge(m, src)
}
func (m *GlobalSN) XXX_Size() int {
	return xxx_messageInfo_GlobalSN.Size(m)
}
func (m *GlobalSN) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSN.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSN proto.InternalMessageInfo

func (m *GlobalSN) GetGSN() int64 {
	if m != nil {
		return m.GSN
	}
	return 0
}

type FilterGlobalSN struct {
	GSN                  int64    `protobuf:"varint,1,opt,name=gSN,proto3" json:"gSN,omitempty"`
	ReaderID             int32    `protobuf:"varint,2,opt,name=readerID,proto3" json:"readerID,omitempty"`
	ReaderID2            int32    `protobuf:"varint,3,opt,name=readerID2,proto3" json:"readerID2,omitempty"`
	FilterValue          int32    `protobuf:"varint,4,opt,name=filterValue,proto3" json:"filterValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterGlobalSN) Reset()         { *m = FilterGlobalSN{} }
func (m *FilterGlobalSN) String() string { return proto.CompactTextString(m) }
func (*FilterGlobalSN) ProtoMessage()    {}
func (*FilterGlobalSN) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb12a5d0dd175b31, []int{3}
}

func (m *FilterGlobalSN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterGlobalSN.Unmarshal(m, b)
}
func (m *FilterGlobalSN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterGlobalSN.Marshal(b, m, deterministic)
}
func (m *FilterGlobalSN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterGlobalSN.Merge(m, src)
}
func (m *FilterGlobalSN) XXX_Size() int {
	return xxx_messageInfo_FilterGlobalSN.Size(m)
}
func (m *FilterGlobalSN) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterGlobalSN.DiscardUnknown(m)
}

var xxx_messageInfo_FilterGlobalSN proto.InternalMessageInfo

func (m *FilterGlobalSN) GetGSN() int64 {
	if m != nil {
		return m.GSN
	}
	return 0
}

func (m *FilterGlobalSN) GetReaderID() int32 {
	if m != nil {
		return m.ReaderID
	}
	return 0
}

func (m *FilterGlobalSN) GetReaderID2() int32 {
	if m != nil {
		return m.ReaderID2
	}
	return 0
}

func (m *FilterGlobalSN) GetFilterValue() int32 {
	if m != nil {
		return m.FilterValue
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb12a5d0dd175b31, []int{4}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Record)(nil), "datapb.Record")
	proto.RegisterType((*Ack)(nil), "datapb.Ack")
	proto.RegisterType((*GlobalSN)(nil), "datapb.GlobalSN")
	proto.RegisterType((*FilterGlobalSN)(nil), "datapb.FilterGlobalSN")
	proto.RegisterType((*Empty)(nil), "datapb.Empty")
}

func init() { proto.RegisterFile("datapb/data.proto", fileDescriptor_eb12a5d0dd175b31) }

var fileDescriptor_eb12a5d0dd175b31 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0xad, 0x27, 0x99, 0xcc, 0xe4, 0x0e, 0x0c, 0xc5, 0x8b, 0xca, 0x1a, 0x55, 0x28, 0x8a, 0x10,
	0x44, 0x45, 0x0a, 0x6d, 0x59, 0xb3, 0x18, 0x29, 0x3c, 0xb2, 0x09, 0x92, 0x83, 0xd8, 0x3b, 0x89,
	0x29, 0x51, 0x9d, 0x87, 0x9c, 0x0c, 0x88, 0x0d, 0x3f, 0xc5, 0xbf, 0xf0, 0x11, 0x7c, 0x05, 0x8a,
	0x1d, 0x37, 0xd3, 0x51, 0x11, 0xdd, 0xb2, 0x1a, 0x9f, 0x73, 0xef, 0x39, 0xbe, 0x3e, 0x77, 0x14,
	0x78, 0x5c, 0xb0, 0x9e, 0xb5, 0xd9, 0xcb, 0xe1, 0x27, 0x6c, 0x65, 0xd3, 0x37, 0xd8, 0xd1, 0x94,
	0xff, 0x7b, 0x06, 0x0e, 0xe5, 0x79, 0x23, 0x0b, 0xbc, 0x81, 0x65, 0x2e, 0x4a, 0x5e, 0xf7, 0x71,
	0x44, 0x90, 0x87, 0x82, 0x39, 0xbd, 0xc1, 0x53, 0x2d, 0x4d, 0xc8, 0x6c, 0xbf, 0x96, 0x26, 0x98,
	0xc0, 0xa2, 0xfb, 0xc2, 0x64, 0x11, 0x47, 0xc4, 0x52, 0x25, 0x03, 0xf1, 0x33, 0x58, 0x8b, 0x26,
	0x67, 0x82, 0xf2, 0x56, 0x94, 0x39, 0x8b, 0x23, 0x62, 0xab, 0x86, 0x03, 0x16, 0x9f, 0x80, 0xf3,
	0xb5, 0xe4, 0xdf, 0xe2, 0x88, 0xcc, 0x55, 0x7d, 0x44, 0xc3, 0xad, 0x57, 0xa2, 0xc9, 0x98, 0x48,
	0x13, 0xe2, 0x78, 0x28, 0xb0, 0xe8, 0x0d, 0x1e, 0x34, 0x52, 0xcd, 0x4d, 0x16, 0x1e, 0x0a, 0x5c,
	0x3a, 0xa2, 0x41, 0x53, 0xef, 0xaa, 0xf7, 0x8d, 0xe0, 0x1d, 0x59, 0xea, 0x49, 0x0d, 0xc6, 0xa7,
	0xe0, 0x1a, 0xfd, 0x05, 0x71, 0x95, 0xe1, 0x44, 0xe0, 0x27, 0x00, 0xac, 0x6d, 0x79, 0x5d, 0x70,
	0x19, 0x47, 0x04, 0x94, 0x76, 0x8f, 0x19, 0x9c, 0xf5, 0x1d, 0x71, 0x44, 0x56, 0xda, 0xd9, 0x60,
	0xfc, 0x14, 0x1e, 0x56, 0x65, 0xd7, 0xf1, 0x42, 0x67, 0xd9, 0x91, 0x07, 0x9e, 0x15, 0x58, 0xf4,
	0x36, 0xe9, 0xff, 0x44, 0x60, 0x6d, 0xf3, 0xeb, 0xff, 0x2b, 0x69, 0xff, 0x14, 0x96, 0xef, 0x4c,
	0xea, 0xc7, 0x60, 0x5d, 0xa5, 0x89, 0x1a, 0xda, 0xa2, 0xc3, 0xd1, 0xff, 0x01, 0xeb, 0xb7, 0xa5,
	0xe8, 0xb9, 0xfc, 0x7b, 0x8f, 0x4e, 0x8e, 0xe9, 0x5c, 0x67, 0x26, 0x39, 0x8d, 0x87, 0x9d, 0x98,
	0xf3, 0xe5, 0xf8, 0xaa, 0x89, 0xc0, 0x1e, 0xac, 0x3e, 0x2b, 0xf7, 0x4f, 0x4c, 0xec, 0xf8, 0xf8,
	0xa8, 0x7d, 0xca, 0x5f, 0xc0, 0xfc, 0x4d, 0xd5, 0xf6, 0xdf, 0x2f, 0x7f, 0xcd, 0xc0, 0x8e, 0x58,
	0xcf, 0xf0, 0x0b, 0x70, 0xb6, 0x6a, 0x6b, 0x78, 0x1d, 0xea, 0x7f, 0x79, 0xa8, 0x17, 0xb0, 0x59,
	0x19, 0xbc, 0xcd, 0xaf, 0xfd, 0xa3, 0x00, 0x9d, 0x23, 0x7c, 0x06, 0xae, 0x6e, 0xfe, 0x50, 0xf3,
	0x7f, 0xf4, 0xe3, 0x10, 0xdc, 0x31, 0xc9, 0x9e, 0xdf, 0xc7, 0xfb, 0x02, 0xdc, 0x74, 0x97, 0x75,
	0xb9, 0x2c, 0x33, 0x8e, 0x8f, 0x4d, 0xdd, 0xe4, 0xb4, 0x39, 0x70, 0xf0, 0x8f, 0xce, 0x11, 0x7e,
	0x0d, 0x8f, 0x74, 0x9a, 0x93, 0xf0, 0xc4, 0xb4, 0xdd, 0x8e, 0xf9, 0x4e, 0xf9, 0x73, 0xb0, 0x3f,
	0xca, 0xb2, 0xba, 0xe3, 0xb2, 0x83, 0xa7, 0x9c, 0x81, 0x4d, 0x39, 0x2b, 0xee, 0x33, 0x55, 0xe6,
	0xa8, 0x2f, 0xc6, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x64, 0x2e, 0xe8, 0x46, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	// clients set shardID to -1
	Append(ctx context.Context, opts ...grpc.CallOption) (Data_AppendClient, error)
	AppendOne(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error)
	// replicas set proper shardID and localReplicaID
	Replicate(ctx context.Context, opts ...grpc.CallOption) (Data_ReplicateClient, error)
	// the servers don't need to know the sources of the following requests
	Subscribe(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (Data_SubscribeClient, error)
	FilterSubscribe(ctx context.Context, in *FilterGlobalSN, opts ...grpc.CallOption) (Data_FilterSubscribeClient, error)
	Trim(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (*Ack, error)
	Read(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (*Record, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) Append(ctx context.Context, opts ...grpc.CallOption) (Data_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[0], "/datapb.Data/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataAppendClient{stream}
	return x, nil
}

type Data_AppendClient interface {
	Send(*Record) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type dataAppendClient struct {
	grpc.ClientStream
}

func (x *dataAppendClient) Send(m *Record) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataAppendClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) AppendOne(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/datapb.Data/AppendOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (Data_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[1], "/datapb.Data/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataReplicateClient{stream}
	return x, nil
}

type Data_ReplicateClient interface {
	Send(*Record) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type dataReplicateClient struct {
	grpc.ClientStream
}

func (x *dataReplicateClient) Send(m *Record) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataReplicateClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) Subscribe(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (Data_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[2], "/datapb.Data/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_SubscribeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type dataSubscribeClient struct {
	grpc.ClientStream
}

func (x *dataSubscribeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) FilterSubscribe(ctx context.Context, in *FilterGlobalSN, opts ...grpc.CallOption) (Data_FilterSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[3], "/datapb.Data/FilterSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataFilterSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_FilterSubscribeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type dataFilterSubscribeClient struct {
	grpc.ClientStream
}

func (x *dataFilterSubscribeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) Trim(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/datapb.Data/Trim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Read(ctx context.Context, in *GlobalSN, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/datapb.Data/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	// clients set shardID to -1
	Append(Data_AppendServer) error
	AppendOne(context.Context, *Record) (*Ack, error)
	// replicas set proper shardID and localReplicaID
	Replicate(Data_ReplicateServer) error
	// the servers don't need to know the sources of the following requests
	Subscribe(*GlobalSN, Data_SubscribeServer) error
	FilterSubscribe(*FilterGlobalSN, Data_FilterSubscribeServer) error
	Trim(context.Context, *GlobalSN) (*Ack, error)
	Read(context.Context, *GlobalSN) (*Record, error)
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) Append(srv Data_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedDataServer) AppendOne(ctx context.Context, req *Record) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendOne not implemented")
}
func (*UnimplementedDataServer) Replicate(srv Data_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (*UnimplementedDataServer) Subscribe(req *GlobalSN, srv Data_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDataServer) FilterSubscribe(req *FilterGlobalSN, srv Data_FilterSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterSubscribe not implemented")
}
func (*UnimplementedDataServer) Trim(ctx context.Context, req *GlobalSN) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trim not implemented")
}
func (*UnimplementedDataServer) Read(ctx context.Context, req *GlobalSN) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).Append(&dataAppendServer{stream})
}

type Data_AppendServer interface {
	Send(*Ack) error
	Recv() (*Record, error)
	grpc.ServerStream
}

type dataAppendServer struct {
	grpc.ServerStream
}

func (x *dataAppendServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataAppendServer) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_AppendOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AppendOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/AppendOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AppendOne(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).Replicate(&dataReplicateServer{stream})
}

type Data_ReplicateServer interface {
	Send(*Ack) error
	Recv() (*Record, error)
	grpc.ServerStream
}

type dataReplicateServer struct {
	grpc.ServerStream
}

func (x *dataReplicateServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataReplicateServer) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GlobalSN)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).Subscribe(m, &dataSubscribeServer{stream})
}

type Data_SubscribeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type dataSubscribeServer struct {
	grpc.ServerStream
}

func (x *dataSubscribeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_FilterSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterGlobalSN)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).FilterSubscribe(m, &dataFilterSubscribeServer{stream})
}

type Data_FilterSubscribeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type dataFilterSubscribeServer struct {
	grpc.ServerStream
}

func (x *dataFilterSubscribeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_Trim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Trim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/Trim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Trim(ctx, req.(*GlobalSN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Read(ctx, req.(*GlobalSN))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapb.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendOne",
			Handler:    _Data_AppendOne_Handler,
		},
		{
			MethodName: "Trim",
			Handler:    _Data_Trim_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Data_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _Data_Append_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Replicate",
			Handler:       _Data_Replicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Data_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FilterSubscribe",
			Handler:       _Data_FilterSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datapb/data.proto",
}
